{"version":3,"sources":["webpack://clock/./src/utils/formatTime.ts","webpack://clock/./src/clock.ts","webpack://clock/./src/createStopwatch.ts","webpack://clock/./src/createTimer.ts","webpack://clock/./src/createPomodoro.ts","webpack://clock/./src/confirmPopUp.ts","webpack://clock/./src/utils/ptBrClocks.ts","webpack://clock/./src/utils/accessibilityAlert.ts","webpack://clock/./src/createClockEvents.ts","webpack://clock/./src/clockRender.ts","webpack://clock/./src/utils/animate.ts","webpack://clock/./src/validTimeInput.ts","webpack://clock/./src/inputEvents.ts","webpack://clock/./src/index.ts"],"names":["formatTimeUnit","value","Number","parseInt","slice","minutesToSeconds","minutes","readableTimeToSeconds","time","split","hours","seconds","hoursToSeconds","ticker","setTickAction","callback","this","tickAction","starter","setStartAction","startAction","start","from","to","oneSecond","tickID","setInterval","tick","stopper","setStopAction","stopAction","stop","clearInterval","stopwatchClocker","timerClocker","regressiveFrom","progressiveFrom","negatedTo","pomodoroClocker","resetClock","pomodoroState","pause","restart","setConfirmEvent","startConfirmEvent","title","description","confirm","track","document","querySelector","message","confirmAction","popUp","createElement","buttonsContainer","confirmButton","declineButton","classList","add","setAttribute","insertAdjacentHTML","innerText","insertAdjacentElement","confirmEvent","Proxy","undefined","set","currentContext","key","newValue","removeEventListener","decline","remove","focus","addEventListener","body","play","stopwatch","timer","pomodoro","alerts","openToAlert","pendents","alertUser","alert","toElement","describedByElementId","alertEl","describe","getElementById","setTimeout","shift","removeAttribute","length","alertOnAlertSpan","push","getElementClockUnit","id","Array","querySelectorAll","render","timeElement","progressBarElement","renderedTime","elementTimeUnits","passedMinutes","timeArrayProps","unitIndex","minUnitIndex","minUnitElement","innerHTML","animate","transform","opacity","duration","fill","setRenderedTime","forEach","unit","index","firstMinUnitElement","secondMinUnitElement","setClock","currentTime","secondsUTC","Math","floor","alertMinutes","getTimeUnitAsArray","secondMinUnit","firstMinUnit","secondRenderedMinUnit","setProgressBar","percentage","style","width","toFixed","err","Error","createClockRender","clockType","getTime","element","inProgress","defaultClockStartAction","ptBrClocks","defaultTickAction","progressiveTimer","defaultClockStopAction","clock","Object","create","_","newPomodoro","assign","confirmPopUp","setMaxAndMinValue","MAX_INPUT_VALUE","MIN_INPUT_VALUE","input","inputStep","ArrowLeft","e","preventDefault","previousSibling","previousElementSibling","select","ArrowRight","nextSibling","nextElementSibling","changeInputUnit","target","focusInputUnit","validInputUnit","inputUnit","nextInputUnit","isNaN","validInput","inputsTimeUnits","map","trim","join","unitInput","selectedEvents","startButton","stopButton","selectClockEvent","selectClock","startEvent","stopEvent"],"mappings":"6HAAO,IAAMA,EAAiB,SAACC,GAAD,MAAW,WAAIC,OAAOC,SAASF,EAAO,KAAMG,OAAO,IAapEC,EAAmB,SAACC,GAAD,OACZ,GAAlBJ,OAAOI,IAIIC,EAAwB,SAACC,GAAyB,I,IAAA,G,EAC3BA,EAAKC,MAAM,K,EADgB,E,kzBACtDC,EADsD,KAC/CJ,EAD+C,KACtCK,EADsC,KAK7D,OAb4B,SAACD,GAAD,OACZ,GAAhBR,OAAOQ,GAAc,GAUnBE,CAAeF,GAASL,EAAiBC,GAAWJ,OAAOS,ICnBlDE,EAAS,CACpBC,cADoB,SACNC,GACZC,KAAKC,WAAaF,IAITG,EAAU,CACrBC,eADqB,SACNJ,GACbC,KAAKI,YAAcL,GAGrBM,MALqB,WAKK,WAApBC,EAAoB,uDAAb,GAAIC,EAAS,uDAAJ,GACdC,EAAY,IAEdF,IAAMN,KAAKM,KAAOf,EAAsBe,IACxCC,IAAIP,KAAKO,GAAKhB,EAAsBgB,IAEpCP,KAAKI,aAAaJ,KAAKI,YAAYJ,KAAKM,KAAMN,KAAKO,IAEvDP,KAAKS,OAASC,aAAY,WACxB,EAAKC,SACJH,KAIMI,EAAU,CACrBC,cADqB,WACoB,IAA3Bd,EAA2B,uDAAN,KACjCC,KAAKc,WAAaf,GAGpBgB,KALqB,WAMff,KAAKc,YAAYd,KAAKc,aAC1BE,cAAchB,KAAKS,QACnBT,KAAKM,KAAO,I,urBChChB,IAAMW,EAAmB,EAAH,KACpBN,KADoB,WAElBX,KAAKM,OACDN,KAAKC,YAAcD,KAAKM,KAAO,GAAGN,KAAKC,WAAWD,KAAKM,KAAMN,KAAKO,IAClEP,KAAKM,MAAQN,KAAKO,IAAIP,KAAKe,SAE9Bb,GACAL,GACAe,G,urBCRL,IAAMM,EAAe,OACnBP,KADgB,WAEd,IAAMQ,EAAiBnB,KAAKO,GAAKP,KAAKM,KAChCc,GAA+B,EAAbpB,KAAKM,MAAa,EACpCe,GAAarB,KAAKO,GACxBP,KAAKM,OAEDN,KAAKC,YACPD,KAAKC,WAAWkB,EAAgBnB,KAAKO,GAAIa,GACvCpB,KAAKM,KAAOe,GAAWrB,KAAKe,SAE/Bb,GACAL,GACAe,G,urBCAL,IAAMU,EAAkB,KACtBC,WADmB,WAEjBvB,KAAKwB,cAAgB,WACrBxB,KAAKM,KAAO,EACZN,KAAKO,GAAKlB,EAAiB,KAG7BsB,KAPmB,WAQjBX,KAAKM,OAEDN,KAAKC,YAAcD,KAAKM,KAAO,GAAGN,KAAKC,WAAWD,KAAKM,KAAMN,KAAKO,IAClEP,KAAKM,MAAQN,KAAKO,KACG,aAAvBP,KAAKwB,cAA+BxB,KAAKyB,QAAUzB,KAAK0B,YAI5DC,gBAhBmB,SAgBHC,GACd5B,KAAK4B,kBAAoBA,GAG3BzB,eApBmB,SAoBJJ,GACbC,KAAKI,YAAcL,GAGrBM,MAxBmB,WAwBX,WAEFL,KAAKI,aAAaJ,KAAKI,YAAYJ,KAAKM,KAAMN,KAAKO,IAEvDP,KAAKS,OAASC,aAAY,WACxB,EAAKC,SAJW,MAQpBc,MAjCmB,WAiCX,WACNzB,KAAKO,GAAKlB,EAAiB,GAC3BW,KAAKe,OAYLf,KAAK4B,kBACH,CACEC,MAAO,oBACPC,YAAa,iCAbK,SAACC,GACrB,GAAIA,EAGF,OAFA,EAAK1B,aACL,EAAKmB,cAAgB,SAIvB,EAAKD,iBAYTG,QAxDmB,WAwDT,WACR1B,KAAKO,GAAKlB,EAAiB,IAC3BW,KAAKe,OAYLf,KAAK4B,kBACH,CACEC,MAAO,iBACPC,YAAa,wCAbK,SAACC,GACrB,GAAIA,EAGF,OAFA,EAAK1B,aACL,EAAKmB,cAAgB,YAIvB,EAAKD,kBAYN1B,GACAe,GChGL,IAAMoB,EAAQC,SAASC,cAAc,SAsFrC,QA7EqB,SAACC,EAAkDC,GACtE,IAAMC,EAAQJ,SAASK,cAAc,OAC/BC,EAAmBN,SAASK,cAAc,OAC1CE,EAAgBP,SAASK,cAAc,UACvCG,EAAgBR,SAASK,cAAc,UAE7CD,EAAMK,UAAUC,IAAI,YACpBN,EAAMO,aAAa,OAAQ,eAC3BP,EAAMO,aAAa,kBAAmB,gBACtCP,EAAMO,aAAa,mBAAoB,sBACvCP,EAAMO,aAAa,WAAY,KAE3BT,EAAQN,OAASM,EAAQL,aAC3BO,EAAMQ,mBACJ,aADF,0CAG4BV,EAAQN,MAHpC,kFAI4DM,EAAQL,YAJpE,oBASFU,EAAcM,UAzBI,MA0BlBL,EAAcK,UAzBI,MA2BlBN,EAAcE,UAAUC,IAAI,WAAY,qBACxCF,EAAcC,UAAUC,IAAI,WAAY,oBAExCJ,EAAiBQ,sBAAsB,YAAaP,GACpDD,EAAiBQ,sBAAsB,YAAaN,GAEpDJ,EAAMU,sBAAsB,YAAaR,GAEzC,IAWMS,EAAe,IAAIC,MACvB,CACElB,aAASmB,EACTd,iBAdwC,CAC1Ce,IAAK,SAACC,EAAgBC,EAAKC,GAMzB,MALwB,kBAAbA,GACTF,EAAehB,cAAckB,GAG/BF,EAAeC,GAAOC,GACf,KAYX,SAASvB,IACPiB,EAAajB,SAAU,EACvBS,EAAce,oBAAoB,QAASxB,GAC3CU,EAAcc,oBAAoB,QAASC,GAC3CnB,EAAMoB,SACNxB,SAASC,cAAiC,UAAUwB,QAGtD,SAASF,IACPR,EAAajB,SAAU,EACvBS,EAAce,oBAAoB,QAASxB,GAC3CU,EAAcc,oBAAoB,QAASC,GAC3CnB,EAAMoB,SACNxB,SAASC,cAAiC,UAAUwB,QAGtDlB,EAAcmB,iBAAiB,QAAS5B,GACxCU,EAAckB,iBAAiB,QAASH,GAExCvB,SAAS2B,KAAKb,sBAAsB,YAAaV,GAEjDL,EAAM6B,OACNxB,EAAMqB,SC7ER,EANmB,CACjBI,UAAW,aACXC,MAAO,wBACPC,SAAU,YCSZ,IAYMC,EAAS,IAAIhB,MACjB,CACEiB,aAAa,EACbC,SAAU,GACVC,UAHF,WAGc,aACyCpE,KAAKmE,SAAS,GAAzDE,EADE,EACFA,MAAOC,EADL,EACKA,UAAWC,EADhB,EACgBA,qBACpBC,EAAUvC,SAASC,cAAcoC,GACjCG,EAAWxC,SAASyC,eAAeH,GAEzCE,EAAS3B,UAAYuB,EACrBG,EAAQ5B,aAAa,OAAQ,SAC7B4B,EAAQ5B,aAAa,mBAAoB2B,GAEzCvE,KAAKkE,aAAc,EAEnBS,YAAW,WACT,EAAKR,SAASS,QACdH,EAAS3B,UAAY,GACrB0B,EAAQK,gBAAgB,OAAQ,SAChCL,EAAQK,gBAAgB,mBAAoBN,GAEvC,EAAKJ,SAASW,OAGjB,EAAKV,YAFL,EAAKF,aAAc,IAIpB,KAEHM,EAAQ5B,aAAa,OAAQ,WAxCa,CAC9CO,IAD8C,SAC1CC,EAAgBC,EAAKC,GACvB,MACY,gBAARD,GACoB,kBAAbC,IAGXF,EAAeC,GAAOC,IAFX,KAgDFyB,EAAmB,SAAC5C,GAAD,OAPdkC,EAQP,CACPA,MAAOlC,EACPmC,UAAW,cACXC,qBAAsB,UAVxBN,EAAOE,SAASa,KAAKX,QACjBJ,EAAOC,aACTD,EAAOG,aAHM,IAACC,G,k7BCjDlB,IAAMY,EAAsB,SAACC,GAAD,OACzBC,MAAM7E,KAAK2B,SAASyC,eAAeQ,GAAIE,iBAAiB,SAAShG,OAC/D,IAGCiG,ECRoB,SACxBC,EAKAC,GAEA,IAGMC,EAAe,CAHG,CAAC,IAAK,KACR,CAAC,IAAK,KACN,CAAC,IAAK,MAGtBC,EAAmB,CAAC,QAAS,UAAW,WAC1CC,EAAgB,EAoCdL,EAAS,SAACM,GAZU,IAAC,EAAE1G,EAAO2G,EAAWC,EAEvCC,EAFqB7G,GAAF,EAiBP0G,GAjBS1G,MAAO2G,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,cAEvCC,EAAiBR,EADHG,EAAiBG,IACWC,IAEjCE,UAAY9G,EACd6G,ECnCPE,QAAQ,CAbL,CACTC,UAAW,mBACXC,QAAS,GAEE,CACXD,UAAW,gBACXC,QAAS,IAE+B,CACxCC,SAAU,IACVC,KAAM,aDyCgB,SAAC,GAAuC,IAArCnH,EAAqC,EAArCA,MAAO2G,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC3CL,EAAaI,GAAWC,GAAgB5G,EASxCoH,CAAgBV,IA+ClB,MAAO,CACLpE,WAxFiB,WACjBiE,EAAac,SAAQ,SAACC,EAAMC,GAC1B,IADoC,IAEgBlB,EADpCG,EAAiBe,IADG,GAE7BC,EAF6B,KAERC,EAFQ,KAIpCD,EAAoBV,UAAY,IAChCW,EAAqBX,UAAY,IAEjCQ,EAAK,GAAK,IACVA,EAAK,GAAK,OAEZb,EAAgB,GA8EhBiB,SAlCF,SAAkBC,EAAqBpH,GT3EJ,IAACqH,EAC9BnH,GSiCe,SAACkH,GACpB,ITrB6BjH,ESqBvBL,GTrBuBK,ESqBIiH,ETrBgBE,KAAKC,MAAMpH,EAAU,KSsBlEL,GAAWA,EAAUoG,IACvBA,EAAgBpG,EAChByF,EAAiB,GAAD,OAAK,UAAiBzF,EAAjBA,EAAU,EAAV,+CAsCvB0H,CAAaJ,IT5EqBC,ESwGZD,ETvGlBlH,EAAQoH,KAAKC,MAAOF,EAAa,GAAM,IAItC,CAACnH,EAHQoH,KAAKC,MAAMF,EAAa,GAAa,GAARnH,GAC7BmH,EAAa,KSqGQP,SA1BR,SAACrH,EAAe2G,GAAsB,QANxC,SAAC3G,GAAD,OACzBD,EAAeC,GAAOQ,MAAM,IAMYwH,CAAmBhI,GADM,GACxDiI,EADwD,KACzCC,EADyC,SAET3B,EACpDI,GAH6D,GAExDwB,EAFwD,KAO3DD,IAP2D,MAS7D9B,EAAO,CACLpG,MAAOkI,EACPvB,YACAC,aAJmB,IAQnBqB,IAAkBE,GAEpB/B,EAAO,CACLpG,MAAOiI,EACPtB,YACAC,aAJmB,QAezBwB,eA/CF,SAAwBC,GACtB,IACE/B,EAAmBgC,MAAMC,MAAQF,EAAWG,QAAQ,GAAK,IACzDlC,EAAmB3C,aAAa,gBAAiB0E,EAAWG,QAAQ,IACpE,MAAOC,GACP,MAAM,IAAIC,MAAMD,MDxDPE,CACb,CACElI,MAAOuF,EAAoB,eAC3B3F,QAAS2F,EAAoB,iBAC7BtF,QAASsF,EAAoB,kBAE/BhD,SAASyC,eAAe,iBAyG1B,QApGoB,SAACmD,EAAsBC,GACzC,IAAMC,EAAU9F,SAASC,cAAc,YACnC8F,GAAa,EAEXC,EAA0B,WAC9B5C,EAAO9D,aACPwG,EAAQrF,UAAUC,IAAI,mBACtBoC,EAAiB,GAAD,OAAImD,EAAWL,GAAf,cAEhBG,GAAa,GAGTG,EAAoB,SACxBvB,EACApH,EACA4I,GAEA/C,EAAOsB,SAASC,EAAapH,GAE7B,IAAM8H,EAAac,GAAoB,EACf,IAAnBA,EAA0B5I,EACZ,IAAdoH,EAAqBpH,EAEtB8H,GAAc,IAAMA,EAAa,IACnCvC,EAAiB,GAAD,OAAImD,EAAWL,GAAf,kBAGlBxC,EAAOgC,eAAeC,IAGlBe,EAAyB,WAC7BN,EAAQrF,UAAUe,OAAO,mBACP,aAAdoE,GACF9C,EAAiB,GAAD,OAAImD,EAAWL,GAAf,iBAClBG,GAAa,GAkDTM,EA/CS,CACbxE,UADa,WAEX,IAAMwE,ENlDyBC,OAAOC,OAAOvH,GM6D7C,OAJAqH,EAAMnI,gBALc,SAACG,EAAMC,GACzB0H,IACA5C,EAAOsB,SAASrG,EAAMC,MAIxB+H,EAAMxI,cAAcqI,GACpBG,EAAMzH,cAAcwH,GAEbC,GAGTvE,MAhBa,WAiBX,IAAMuE,EL5DqBC,OAAOC,OAAOtH,GKuEzC,OAJAoH,EAAMnI,gBALc,SAACsI,EAAGlI,GACtB0H,IACA5C,EAAOsB,SAASpG,EAAIA,MAItB+H,EAAMxI,cAAcqI,GACpBG,EAAMzH,cAAcwH,GAEbC,GAGTtE,SA/Ba,WAgCX,IJME0E,EINIJ,GJMJI,EAAcH,OAAOC,OAAOlH,GAC3BiH,OAAOI,OAAOD,EAAa,CAChClH,cAAe,WACflB,KAAM,EACNC,GAAIlB,EAAiB,OICnB,OATAiJ,EAAMnI,gBAAe,SAACG,GACpB2H,IACA5C,EAAOsB,SAASrG,MAElBgI,EAAMxI,cAAcqI,GACpBG,EAAM3G,gBAAgBiH,GAEtBN,EAAMzH,cAAcwH,GAEbC,IAIUT,KAarB,MAAO,CAXY,WACjB,IAAIG,EAAJ,CACA,IAAMxI,EAAqB,aAAdqI,EAA2B,GAAKC,IAC7CQ,EAAMjI,MAAM,WAAYb,KAGR,WACXwI,GACLM,EAAMvH,UGrHV,IAAM8H,EAAoB,SAACC,GAAD,IAA0BC,EAA1B,uDAA4C,EAA5C,OACxB,SAAC9J,EAAe+J,GAEZA,EAAM/J,MAAQD,EADZC,EAAQ8J,GAAmB9J,EAAQ6J,EACRA,EAGF7J,KAYjC,QANmB,CACjBS,MAAOmJ,EAJK,IAKZvJ,QAASuJ,EAJc,IAKvBlJ,QAASkJ,EALc,KCVzB,IAAMI,EAAY,CAChBC,UAAW,SAACnB,EAAsBoB,GAChCA,EAAEC,iBACF,IAAMC,EAAkBtB,EAAQuB,uBAC5BD,GAAiBA,EAAgBE,UAEvCC,WAAY,SAACzB,EAAsBoB,GACjCA,EAAEC,iBACF,IAAMK,EAAc1B,EAAQ2B,mBACxBD,GAAaA,EAAYF,WAIpBI,EAAkB,SAACR,GAC1BF,EAAUE,EAAE9F,MAAM4F,EAAUE,EAAE9F,KAAK8F,EAAES,OAAQT,IAGtCU,EAAiB,SAACV,GAC5BA,EAAES,OAA4BL,UAGpBO,EAAiB,SAACX,GAC7B,IAAMY,EAAYZ,EAAES,OACdI,EAAgBD,EAAUL,mBAE5BO,MAAM/K,OAAO6K,EAAU9K,QACzB8K,EAAU9K,MAAQ,GAIf+K,EAK0B,IAA3BD,EAAU9K,MAAM6F,SAClBkF,EAAcT,SACdW,EAAWH,EAAU7E,IAAIhG,OAAO6K,EAAU9K,OAAQ8K,IANlDG,UAAmBhL,OAAO6K,EAAU9K,OAAQ8K,I,0GCxBhD,IAAMI,EAAkBhF,MAAM7E,KAC5B2B,SAASmD,iBAAmC,UAExC0C,EAAU,kBACdqC,EACGC,KAAI,YAAe,IAAZnL,EAAY,EAAZA,MACN,OAAKA,EAAMoL,QAAUJ,MAAM/K,OAAOD,IAAgB,KAC3CD,EAAeC,MAEvBqL,KAAK,MAEVH,EAAgB7D,SAAQ,SAACiE,GACvBA,EAAU5G,iBAAiB,QAASmG,GACpCS,EAAU5G,iBAAiB,QAASkG,GACpCU,EAAU5G,iBAAiB,UAAWgG,MAGxC,IAIIa,EAJEC,EAAcxI,SAASyC,eAAe,SACtCgG,EAAazI,SAASyC,eAAe,QACrC6E,EAAStH,SAASC,cAAiC,iBAMnDyI,EAAmB,WAAM,U,IACvB1L,EAAQsK,EAAOtK,MADQ,G,EAEG2L,EAAY3L,EAAO6I,G,EAFtB,E,kzBAEtB+C,EAFsB,KAEVC,EAFU,KAKf,QAAd,EAAAN,SAAA,SAAgBM,YAEhBL,EAAYlH,oBAAoB,QAAhC,UAAyCiH,SAAzC,aAAyC,EAAgBK,YACzDH,EAAWnH,oBAAoB,QAA/B,UAAwCiH,SAAxC,aAAwC,EAAgBM,WAExDL,EAAY9G,iBAAiB,QAASkH,GACtCH,EAAW/G,iBAAiB,QAASmH,GAErCN,EAAiB,CAAEK,aAAYC,aAE/B/F,EAAiB,KAAD,OAAMmD,EAAWjJ,GAAjB,sBAGlBsK,EAAO5F,iBAAiB,SAAUgH,GAClCA,K","file":"bundle.js","sourcesContent":["export const formatTimeUnit = (value) => `0${Number.parseInt(value, 10)}`.slice(-2);\r\n\r\nexport const secondsToReadableTime = (secondsUTC: number): [hours: number, minutes: number, seconds: number] => {\r\n  const hours = Math.floor((secondsUTC / 60) / 60);\r\n  const minutes = Math.floor(secondsUTC / 60 - hours * 60);\r\n  const seconds = secondsUTC % 60;\r\n\r\n  return [hours, minutes, seconds];\r\n};\r\n\r\nexport const hoursToSeconds = (hours: number | string): number =>\r\n  Number(hours) * 60 * 60;\r\n\r\nexport const minutesToSeconds = (minutes: number | string): number =>\r\n  Number(minutes) * 60;\r\n\r\nexport const secondsToMinutes = (seconds: number) => Math.floor(seconds / 60);\r\n\r\nexport const readableTimeToSeconds = (time: string): number => {\r\n  const [hours, minutes, seconds] = time.split(\":\");\r\n  const secondsUTC =\r\n    hoursToSeconds(hours) + minutesToSeconds(minutes) + Number(seconds);\r\n\r\n  return secondsUTC;\r\n};\r\n","import { readableTimeToSeconds } from \"./utils/formatTime\";\r\n\r\nexport const ticker = {\r\n  setTickAction(callback) {\r\n    this.tickAction = callback;\r\n  },\r\n};\r\n\r\nexport const starter = {\r\n  setStartAction(callback) {\r\n    this.startAction = callback;\r\n  },\r\n\r\n  start(from = \"\", to = \"\") {\r\n    const oneSecond = 1000;\r\n\r\n    if (from) this.from = readableTimeToSeconds(from);\r\n    if (to) this.to = readableTimeToSeconds(to);\r\n\r\n    if (this.startAction) this.startAction(this.from, this.to);\r\n\r\n    this.tickID = setInterval(() => {\r\n      this.tick();\r\n    }, oneSecond);\r\n  },\r\n};\r\n\r\nexport const stopper = {\r\n  setStopAction(callback: Function = null) {\r\n    this.stopAction = callback;\r\n  },\r\n\r\n  stop() {\r\n    if (this.stopAction) this.stopAction();\r\n    clearInterval(this.tickID);\r\n    this.from = 0;\r\n  },\r\n};\r\n","import { starter, ticker, stopper } from \"./clock\";\r\nimport Clock from \"./classes/clock\";\r\n\r\nconst stopwatchClocker = {\r\n  tick() {\r\n    this.from++;\r\n    if (this.tickAction && this.from > 0) this.tickAction(this.from, this.to);\r\n    if (this.from >= this.to) this.stop();\r\n  },\r\n  ...starter,\r\n  ...ticker,\r\n  ...stopper,\r\n};\r\n\r\nconst createStopwatch = (): Clock => Object.create(stopwatchClocker);\r\n\r\nexport default createStopwatch;\r\n","import { starter, ticker, stopper } from \"./clock\";\r\nimport { Clock } from \"./createClock\";\r\n\r\nconst timerClocker = {\r\n  tick() {\r\n    const regressiveFrom = this.to + this.from;\r\n    const progressiveFrom = this.from * -1 || 0;\r\n    const negatedTo = -this.to;\r\n    this.from--;\r\n\r\n    if (this.tickAction)\r\n      this.tickAction(regressiveFrom, this.to, progressiveFrom);\r\n    if (this.from < negatedTo) this.stop();\r\n  },\r\n  ...starter,\r\n  ...ticker,\r\n  ...stopper,\r\n};\r\n\r\nconst createTimer = (): Clock => Object.create(timerClocker);\r\n\r\nexport default createTimer;\r\n","import { ticker, stopper } from \"./clock\";\r\nimport { Clock } from \"./createClock\";\r\n\r\nimport { minutesToSeconds } from \"./utils/formatTime\";\r\n\r\ninterface PomodoroClock extends Clock {\r\n  pomodoroState: \"pomodoro\" | \"pause\";\r\n  from?: number;\r\n  to?: number;\r\n  setConfirmEvent(startConfirmEvent: (message?: { title: string, description: string; }) => void): void;\r\n  resetClock(): void;\r\n  restart(): void;\r\n  pause(): void;\r\n  tick(): void;\r\n}\r\n\r\nconst pomodoroClocker = {\r\n  resetClock() {\r\n    this.pomodoroState = \"pomodoro\";\r\n    this.from = 0;\r\n    this.to = minutesToSeconds(25);\r\n  },\r\n\r\n  tick() {\r\n    this.from++;\r\n\r\n    if (this.tickAction && this.from > 0) this.tickAction(this.from, this.to);\r\n    if (this.from >= this.to) {\r\n      this.pomodoroState === \"pomodoro\" ? this.pause() : this.restart();\r\n    }\r\n  },\r\n\r\n  setConfirmEvent(startConfirmEvent) {\r\n    this.startConfirmEvent = startConfirmEvent;\r\n  },\r\n\r\n  setStartAction(callback) {\r\n    this.startAction = callback;\r\n  },\r\n\r\n  start() {\r\n    const oneSecond = 1000;\r\n    if (this.startAction) this.startAction(this.from, this.to);\r\n\r\n    this.tickID = setInterval(() => {\r\n      this.tick();\r\n    }, oneSecond);\r\n  },\r\n\r\n  pause() {\r\n    this.to = minutesToSeconds(5);\r\n    this.stop();\r\n\r\n    const confirmAction = (confirm: boolean) => {\r\n      if (confirm) {\r\n        this.start();\r\n        this.pomodoroState = \"pause\";\r\n        return;\r\n      }\r\n\r\n      this.resetClock();\r\n    };\r\n\r\n    this.startConfirmEvent(\r\n      {\r\n        title: \"Pomodoro completo\",\r\n        description: \"Você quer iniciar uma pausa?\",\r\n      },\r\n      confirmAction\r\n    );\r\n  },\r\n\r\n  restart() {\r\n    this.to = minutesToSeconds(25);\r\n    this.stop();\r\n\r\n    const confirmAction = (confirm: boolean) => {\r\n      if (confirm) {\r\n        this.start();\r\n        this.pomodoroState = \"pomodoro\";\r\n        return;\r\n      }\r\n\r\n      this.resetClock();\r\n    };\r\n\r\n    this.startConfirmEvent(\r\n      {\r\n        title: \"Pause completo\",\r\n        description: \"Você quer iniciar um novo pomodoro?\",\r\n      },\r\n      confirmAction\r\n    );\r\n  },\r\n\r\n  ...ticker,\r\n  ...stopper,\r\n};\r\n\r\nconst createPomodoro = (): PomodoroClock => {\r\n  const newPomodoro = Object.create(pomodoroClocker);\r\n  return Object.assign(newPomodoro, {\r\n    pomodoroState: \"pomodoro\",\r\n    from: 0,\r\n    to: minutesToSeconds(25),\r\n  });\r\n};\r\n\r\nexport default createPomodoro;\r\n","const track = document.querySelector(\"audio\");\r\ninterface ConfirmEvent {\r\n  confirm: boolean | undefined;\r\n  confirmAction: Function;\r\n}\r\n\r\nconst POP_CONFIRM = \"SIM\";\r\nconst POP_DECLINE = \"NÃO\";\r\n\r\nconst confirmPopUp = (message?: { title: string, description: string }, confirmAction?: Function): void => {\r\n  const popUp = document.createElement(\"div\");\r\n  const buttonsContainer = document.createElement(\"div\");\r\n  const confirmButton = document.createElement(\"button\");\r\n  const declineButton = document.createElement(\"button\");\r\n\r\n  popUp.classList.add(\"c-pop-up\");\r\n  popUp.setAttribute(\"role\", \"alertdialog\")\r\n  popUp.setAttribute(\"aria-labelledby\", \"pop-up-title\")\r\n  popUp.setAttribute(\"aria-describedby\", \"pop-up-description\")\r\n  popUp.setAttribute(\"tabindex\", '0');\r\n\r\n  if (message.title && message.description) {\r\n    popUp.insertAdjacentHTML(\r\n      \"afterbegin\",\r\n      `\r\n      <span id=\"pop-up-title\">${message.title}</span>\r\n      <span class=\"c-pop-up__message\" id=\"pop-up-description\">${message.description}</span>\r\n      `\r\n    );\r\n  }\r\n\r\n  confirmButton.innerText = POP_CONFIRM;\r\n  declineButton.innerText = POP_DECLINE;\r\n\r\n  confirmButton.classList.add(\"c-button\", \"c-button--confirm\");\r\n  declineButton.classList.add(\"c-button\", \"c-button--reject\");\r\n\r\n  buttonsContainer.insertAdjacentElement(\"beforeend\", confirmButton);\r\n  buttonsContainer.insertAdjacentElement(\"beforeend\", declineButton);\r\n\r\n  popUp.insertAdjacentElement(\"beforeend\", buttonsContainer);\r\n\r\n  const handler: ProxyHandler<ConfirmEvent> = {\r\n    set: (currentContext, key, newValue) => {\r\n      if (typeof newValue === \"boolean\") {\r\n        currentContext.confirmAction(newValue);\r\n      }\r\n\r\n      currentContext[key] = newValue;\r\n      return true;\r\n    },\r\n  };\r\n\r\n  const confirmEvent = new Proxy(\r\n    {\r\n      confirm: undefined,\r\n      confirmAction,\r\n    },\r\n    handler\r\n  );\r\n\r\n  function confirm() {\r\n    confirmEvent.confirm = true;\r\n    confirmButton.removeEventListener(\"click\", confirm);\r\n    declineButton.removeEventListener(\"click\", decline);\r\n    popUp.remove();\r\n    document.querySelector<HTMLSelectElement>(\"#start\").focus();\r\n  }\r\n\r\n  function decline() {\r\n    confirmEvent.confirm = false;\r\n    confirmButton.removeEventListener(\"click\", confirm);\r\n    declineButton.removeEventListener(\"click\", decline);\r\n    popUp.remove();\r\n    document.querySelector<HTMLButtonElement>(\"#start\").focus();\r\n  }\r\n\r\n  confirmButton.addEventListener(\"click\", confirm);\r\n  declineButton.addEventListener(\"click\", decline);\r\n\r\n  document.body.insertAdjacentElement(\"beforeend\", popUp);\r\n\r\n  track.play();\r\n  popUp.focus();\r\n};\r\n\r\nexport default confirmPopUp;\r\n","const ptBrClocks = {\r\n  stopwatch: \"Cronômetro\",\r\n  timer: \"Cronômetro regressivo\",\r\n  pomodoro: \"Pomodoro\",\r\n};\r\n\r\nexport default ptBrClocks;","interface Alert {\r\n  alert: string;\r\n  describedByElementId: string;\r\n  toElement: string;\r\n}\r\n\r\ninterface OpenToAlertProxy {\r\n  openToAlert: boolean;\r\n  pendents: Array<Alert>;\r\n  alertUser: Function;\r\n}\r\n\r\nconst handler: ProxyHandler<OpenToAlertProxy> = {\r\n  set(currentContext, key, newValue) {\r\n    if (\r\n        key !== \"openToAlert\" ||\r\n        typeof newValue !== \"boolean\"\r\n      ) return true;\r\n\r\n    currentContext[key] = newValue;  \r\n    return true;\r\n  },\r\n};\r\n\r\nconst alerts = new Proxy(\r\n  {\r\n    openToAlert: true,\r\n    pendents: [],\r\n    alertUser() {\r\n      const { alert, toElement, describedByElementId } = this.pendents[0];\r\n      const alertEl = document.querySelector(toElement);\r\n      const describe = document.getElementById(describedByElementId);\r\n\r\n      describe.innerText = alert;\r\n      alertEl.setAttribute(\"role\", \"alert\");\r\n      alertEl.setAttribute(\"aria-describedby\", describedByElementId);\r\n\r\n      this.openToAlert = false;\r\n\r\n      setTimeout(() => {\r\n        this.pendents.shift();\r\n        describe.innerText = \"\";\r\n        alertEl.removeAttribute(\"role\", \"alert\");\r\n        alertEl.removeAttribute(\"aria-describedby\", describedByElementId);\r\n\r\n        if (!this.pendents.length) {\r\n          this.openToAlert = true;\r\n        } else {\r\n          this.alertUser();\r\n        }\r\n      }, 1000);\r\n\r\n      alertEl.setAttribute(\"role\", \"alert\");\r\n    },\r\n  },\r\n  handler\r\n);\r\n\r\nconst addAlert = (alert: Alert) => {\r\n  alerts.pendents.push(alert);\r\n  if (alerts.openToAlert) {\r\n    alerts.alertUser();\r\n  }\r\n};\r\n\r\nexport const alertOnAlertSpan = (message: string) =>\r\n  addAlert({\r\n    alert: message,\r\n    toElement: \"span#alerts\",\r\n    describedByElementId: \"alerts\",\r\n  });\r\n\r\nexport default addAlert;","import createStopwatch from \"./createStopwatch\";\r\nimport createTimer from \"./createTimer\";\r\nimport createPomodoro from \"./createPomodoro\";\r\n\r\nimport confirmPopUp from \"./confirmPopUp\";\r\nimport ptBrClocks from \"./utils/ptBrClocks\";\r\nimport { alertOnAlertSpan } from \"./utils/accessibilityAlert\";\r\nimport createClockRender, { UnitTimeElement } from \"./clockRender\";\r\n\r\nconst getElementClockUnit = (id: string) =>\r\n  (Array.from(document.getElementById(id).querySelectorAll(\"span\")).slice(\r\n    -2\r\n  ) as unknown) as UnitTimeElement;\r\n\r\nconst render = createClockRender(\r\n  {\r\n    hours: getElementClockUnit(\"clock-hours\"),\r\n    minutes: getElementClockUnit(\"clock-minutes\"),\r\n    seconds: getElementClockUnit(\"clock-seconds\"),\r\n  },\r\n  document.getElementById(\"progress-bar\")\r\n);\r\n\r\nexport type ClockType = \"stopwatch\" | \"timer\" | \"pomodoro\";\r\n\r\nconst selectClock = (clockType: ClockType, getTime: () => string) => {\r\n  const element = document.querySelector(\".c-clock\");\r\n  let inProgress = false;\r\n\r\n  const defaultClockStartAction = () => {\r\n    render.resetClock();\r\n    element.classList.add(\"c-clock--active\");\r\n    alertOnAlertSpan(`${ptBrClocks[clockType]} iniciado`);\r\n\r\n    inProgress = true;\r\n  };\r\n\r\n  const defaultTickAction = (\r\n    currentTime: number,\r\n    time?: number,\r\n    progressiveTimer?: number\r\n  ) => {\r\n    render.setClock(currentTime, time);\r\n\r\n    const percentage = progressiveTimer >= 0\r\n      ? (progressiveTimer * 100) / time\r\n      : (currentTime * 100) / time;\r\n\r\n    if (percentage >= 50 && percentage < 51) {\r\n      alertOnAlertSpan(`${ptBrClocks[clockType]} 50% completo`);\r\n    }\r\n\r\n    render.setProgressBar(percentage);\r\n  };\r\n\r\n  const defaultClockStopAction = () => {\r\n    element.classList.remove(\"c-clock--active\");\r\n    if (clockType !== \"pomodoro\") \r\n      alertOnAlertSpan(`${ptBrClocks[clockType]}, finalizado`);\r\n    inProgress = false;\r\n  };\r\n\r\n  const clocks = {\r\n    stopwatch() {\r\n      const clock = createStopwatch();\r\n\r\n      const startAction = (from, to) => {\r\n        defaultClockStartAction();\r\n        render.setClock(from, to);\r\n      };\r\n\r\n      clock.setStartAction(startAction);\r\n      clock.setTickAction(defaultTickAction);\r\n      clock.setStopAction(defaultClockStopAction);\r\n\r\n      return clock;\r\n    },\r\n\r\n    timer() {\r\n      const clock = createTimer();\r\n\r\n      const startAction = (_, to) => {\r\n        defaultClockStartAction();\r\n        render.setClock(to, to);\r\n      };\r\n\r\n      clock.setStartAction(startAction);\r\n      clock.setTickAction(defaultTickAction);\r\n      clock.setStopAction(defaultClockStopAction);\r\n\r\n      return clock;\r\n    },\r\n\r\n    pomodoro() {\r\n      const clock = createPomodoro();\r\n\r\n      clock.setStartAction((from) => {\r\n        defaultClockStartAction();\r\n        render.setClock(from);\r\n      });\r\n      clock.setTickAction(defaultTickAction);\r\n      clock.setConfirmEvent(confirmPopUp);\r\n\r\n      clock.setStopAction(defaultClockStopAction);\r\n\r\n      return clock;\r\n    },\r\n  };\r\n\r\n  const clock = clocks[clockType]();\r\n\r\n  const startEvent = () => {\r\n    if (inProgress) return;\r\n    const time = clockType === \"pomodoro\" ? \"\" : getTime();\r\n    clock.start(\"00:00:00\", time);\r\n  };\r\n\r\n  const stopEvent = () => {\r\n    if (!inProgress) return;\r\n    clock.stop();\r\n  };\r\n\r\n  return [startEvent, stopEvent];\r\n};\r\n\r\nexport default selectClock;\r\n","import { alertOnAlertSpan } from \"./utils/accessibilityAlert\";\r\nimport startAnimate from \"./utils/animate\";\r\nimport { formatTimeUnit, secondsToMinutes, secondsToReadableTime } from \"./utils/formatTime\";\r\n\r\nexport type UnitTimeElement = readonly [HTMLElement, HTMLElement];\r\n\r\nconst createClockRender = (\r\n  timeElement: {\r\n    readonly hours: UnitTimeElement;\r\n    readonly minutes: UnitTimeElement;\r\n    readonly seconds: UnitTimeElement;\r\n  },\r\n  progressBarElement?: HTMLElement\r\n) => {\r\n  const hours: string[] = [\"0\", \"0\"],\r\n    minutes: string[] = [\"0\", \"0\"],\r\n    seconds: string[] = [\"0\", \"0\"];\r\n  const renderedTime = [hours, minutes, seconds];\r\n\r\n  const elementTimeUnits = [\"hours\", \"minutes\", \"seconds\"];\r\n  let passedMinutes = 0;\r\n\r\n  const resetClock = () => {\r\n    renderedTime.forEach((unit, index) => {\r\n      const element = elementTimeUnits[index];\r\n      const [firstMinUnitElement, secondMinUnitElement] = timeElement[element];\r\n\r\n      firstMinUnitElement.innerHTML = \"0\";\r\n      secondMinUnitElement.innerHTML = \"0\";\r\n\r\n      unit[0] = \"0\";\r\n      unit[1] = \"0\";\r\n    });\r\n    passedMinutes = 0;\r\n  };\r\n\r\n  const alertMinutes = (currentTime: number) => {\r\n    const minutes = secondsToMinutes(currentTime);\r\n    if (minutes && minutes > passedMinutes) {\r\n      passedMinutes = minutes;\r\n      alertOnAlertSpan(`${ minutes > 1 ? `${minutes} minutos decorridos` : `${minutes} minuto decorrido`}`);\r\n    }\r\n  }\r\n\r\n  const setMinUnitElement = ({ value, unitIndex, minUnitIndex }) => {\r\n    const unitElement = elementTimeUnits[unitIndex];\r\n    const minUnitElement = timeElement[unitElement][minUnitIndex];\r\n\r\n    minUnitElement.innerHTML = value;\r\n    startAnimate(minUnitElement);\r\n  };\r\n\r\n  const setRenderedTime = ({ value, unitIndex, minUnitIndex }) => {\r\n    renderedTime[unitIndex][minUnitIndex] = value;\r\n  };\r\n\r\n  const render = (timeArrayProps: {\r\n    value: string;\r\n    unitIndex: number;\r\n    minUnitIndex: number;\r\n  }) => {\r\n    setMinUnitElement(timeArrayProps);\r\n    setRenderedTime(timeArrayProps);\r\n  };\r\n\r\n  function setProgressBar(percentage: number) {\r\n    try {\r\n      progressBarElement.style.width = percentage.toFixed(2) + \"%\";\r\n      progressBarElement.setAttribute(\"aria-valuenow\", percentage.toFixed(0));\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  }\r\n\r\n  const getTimeUnitAsArray = (value: number) =>\r\n    formatTimeUnit(value).split(\"\") as [string, string];\r\n\r\n  function setClock(currentTime: number, time?: number) {\r\n    alertMinutes(currentTime)\r\n\r\n    const renderReadableTime = (value: number, unitIndex: number) => {\r\n      const [secondMinUnit, firstMinUnit] = getTimeUnitAsArray(value);\r\n      const [secondRenderedMinUnit, firstRenderedMinUnit] = renderedTime[\r\n        unitIndex\r\n      ];\r\n\r\n\r\n      if (firstMinUnit !== firstRenderedMinUnit) {\r\n        const minUnitIndex = 1;\r\n        render({\r\n          value: firstMinUnit,\r\n          unitIndex,\r\n          minUnitIndex,\r\n        });\r\n      }\r\n\r\n      if (secondMinUnit !== secondRenderedMinUnit) {\r\n        const minUnitIndex = 0;\r\n        render({\r\n          value: secondMinUnit,\r\n          unitIndex,\r\n          minUnitIndex,\r\n        });\r\n      }\r\n    };\r\n\r\n    secondsToReadableTime(currentTime).forEach(renderReadableTime);\r\n  }\r\n\r\n  return {\r\n    resetClock,\r\n    setClock,\r\n    setProgressBar,\r\n  };\r\n};\r\n\r\nexport default createClockRender;\r\n","const startAnimate = (element: HTMLElement) => {\r\n  const to = {\r\n    transform: \"translateY(32px)\",\r\n    opacity: 0,\r\n  };\r\n  const from = {\r\n    transform: \"translateY(0)\",\r\n    opacity: 1,\r\n  };\r\n  const options: KeyframeAnimationOptions = {\r\n    duration: 200,\r\n    fill: \"forwards\",\r\n  };\r\n\r\n  element.animate([to, from], options);\r\n};\r\n\r\nexport default startAnimate;","import { formatTimeUnit } from \"./utils/formatTime\";\r\n\r\nconst setMaxAndMinValue = (MAX_INPUT_VALUE: number, MIN_INPUT_VALUE = 0) => \r\n  (value: number, input: HTMLInputElement) => {\r\n    if (value < MIN_INPUT_VALUE || value > MAX_INPUT_VALUE) {\r\n      input.value = formatTimeUnit(MAX_INPUT_VALUE);\r\n      return;\r\n    }\r\n    input.value = formatTimeUnit(value);\r\n  };\r\n\r\nconst hours = 99;\r\nconst secondAndMinutes = 59;\r\n\r\nconst validInput = {\r\n  hours: setMaxAndMinValue(hours),\r\n  minutes: setMaxAndMinValue(secondAndMinutes),\r\n  seconds: setMaxAndMinValue(secondAndMinutes),\r\n};\r\n\r\nexport default validInput;","import validInput from \"./validTimeInput\";\r\n\r\nconst inputStep = {\r\n  ArrowLeft: (element: HTMLElement, e: KeyboardEvent) => {\r\n    e.preventDefault();\r\n    const previousSibling = element.previousElementSibling as HTMLInputElement;\r\n    if (previousSibling) previousSibling.select();\r\n  },\r\n  ArrowRight: (element: HTMLElement, e: KeyboardEvent) => {\r\n    e.preventDefault();\r\n    const nextSibling = element.nextElementSibling as HTMLInputElement;\r\n    if (nextSibling) nextSibling.select();\r\n  },\r\n};\r\n\r\nexport const changeInputUnit = (e: KeyboardEvent) => {\r\n  if (inputStep[e.key]) inputStep[e.key](e.target, e);\r\n}\r\n\r\nexport const focusInputUnit = (e: FocusEvent) => {\r\n  (e.target as HTMLInputElement).select();\r\n}\r\n\r\nexport const validInputUnit = (e: InputEvent) => {\r\n  const inputUnit = e.target as HTMLInputElement;\r\n  const nextInputUnit = inputUnit.nextElementSibling as HTMLInputElement;\r\n\r\n  if (isNaN(Number(inputUnit.value))) {\r\n    inputUnit.value = \"\";\r\n    return;\r\n  }\r\n\r\n  if (!nextInputUnit) {\r\n    validInput.seconds(Number(inputUnit.value), inputUnit);\r\n    return;\r\n  }\r\n\r\n  if (inputUnit.value.length === 2) {\r\n    nextInputUnit.select();\r\n    validInput[inputUnit.id](Number(inputUnit.value), inputUnit);\r\n  }\r\n}","import selectClock, { ClockType } from \"./createClockEvents\";\r\n\r\nimport ptBrClocks from \"./utils/ptBrClocks\";\r\nimport { formatTimeUnit } from \"./utils/formatTime\";\r\nimport { alertOnAlertSpan } from \"./utils/accessibilityAlert\";\r\nimport { changeInputUnit, focusInputUnit, validInputUnit } from \"./inputEvents\";\r\n\r\nimport \"../public/styles/style.scss\";\r\n\r\nconst inputsTimeUnits = Array.from(\r\n  document.querySelectorAll<HTMLInputElement>(\".time\")\r\n);\r\nconst getTime = () =>\r\n  inputsTimeUnits\r\n    .map(({ value }) => {\r\n      if (!value.trim() || isNaN(Number(value))) return \"00\";\r\n      return formatTimeUnit(value);\r\n    })\r\n    .join(\":\");\r\n\r\ninputsTimeUnits.forEach((unitInput) => {\r\n  unitInput.addEventListener(\"input\", validInputUnit);\r\n  unitInput.addEventListener(\"focus\", focusInputUnit);\r\n  unitInput.addEventListener(\"keydown\", changeInputUnit);\r\n});\r\n\r\nconst startButton = document.getElementById(\"start\");\r\nconst stopButton = document.getElementById(\"stop\");\r\nconst select = document.querySelector<HTMLSelectElement>(\"#select-clock\");\r\n\r\nlet selectedEvents;\r\n\r\n\r\n\r\nconst selectClockEvent = () => {\r\n  const value = select.value as ClockType;\r\n  const [startEvent, stopEvent] = selectClock(value, getTime);\r\n\r\n  \r\n  selectedEvents?.stopEvent();\r\n  \r\n  startButton.removeEventListener(\"click\", selectedEvents?.startEvent);\r\n  stopButton.removeEventListener(\"click\", selectedEvents?.stopEvent);\r\n  \r\n  startButton.addEventListener(\"click\", startEvent);\r\n  stopButton.addEventListener(\"click\", stopEvent);\r\n  \r\n  selectedEvents = { startEvent, stopEvent };\r\n\r\n  alertOnAlertSpan(`O ${ptBrClocks[value]} foi selecionado`);\r\n};\r\n\r\nselect.addEventListener(\"change\", selectClockEvent);\r\nselectClockEvent();\r\n"],"sourceRoot":""}